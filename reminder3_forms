form validator
------------------------------------------------------------------
import { useForm } from "react-hook-form";
import './a.css';
import * as yup from 'yup';
import {yupResolver} from '@hookform/resolvers/yup'; 
export default function A() {
  const schema = yup.object({
    gender: yup.string().required('gender required'),
    username: yup.string().required('username required'),
    password: yup.string().required('password required').max(3, 'min 3 chars required'),
    confpassword: yup.string().required('conf password required')
                  .max(3, 'min 3 chars required')
                  .oneOf([yup.ref('password')], 'should match')
  }).required();
  
  const { register, handleSubmit,formState: { errors } } = useForm({resolver: yupResolver(schema)});
  const onSubmit = data => console.log(data);
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <p><input  {...register("username",{ required: true })} /></p>
      {errors.username && <p>{errors.username.message}</p>}
      <p><input {...register("password", { required: true, maxLength: 5 })} /></p>
      {/* {errors.password?.type === 'max' && <p>{errors.password.message}</p>}
      {errors.password?.type === 'required' && <p>{errors.password.message}</p>} */}
      {errors.password && <p>{errors.password.message}</p>}
    
      <p><input {...register("confpassword", { required: true, maxLength: 5 })} /></p>
      {errors.confpassword && <p>{errors.confpassword.message}</p>}
      <p>
      <select {...register("gender")}>
        <option value="">select</option>
        <option value="female">female</option>
        <option value="male">male</option>
        <option value="other">other</option>
      </select>
      </p>
      {errors.gender && <p>{errors.gender.message}</p>}
      <input type="submit" />
    </form>
  );
}
-------------------------------------------------------------------------------------------
form validator with formik and yup
import React from "react";
import "./form_test.css";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
export default class FormTest extends React.Component {
  initialValues = {
    email: "",
    password: "",
    dtp: false,
  };
  signInSchema = Yup.object().shape({
    email: Yup.string().email().required("Email is required"),

    password: Yup.string()
      .required("Password is required")
      .min(4, "Password is too short - should be 4 chars minimum"),
    dtp: Yup.boolean()
      .required("dtp is required")
      .oneOf([true], "The terms and conditions must be accepted."),
  });
  constructor() {
    super();
    console.log("");
  }
  render() {
    return (
      <Formik
        initialValues={this.initialValues}
        validationSchema={this.signInSchema}
        onSubmit={(values) => {
          console.log(values);
        }}
      >
        {(formik) => {
          const { errors, touched, isValid, dirty } = formik;
          return (
            <div className="container">
              <h1>Sign in to continue</h1>
              <Form>
                <div className="form-row">
                  <label htmlFor="email">Email</label>
                  <Field
                    type="email"
                    name="email"
                    id="email"
                    className={
                      errors.email && touched.email ? "input-error" : null
                    }
                  />
                  <ErrorMessage
                    name="email"
                    component="span"
                    className="error"
                  />
                </div>

                <div className="form-row">
                  <label htmlFor="password">Password</label>
                  <Field
                    type="password"
                    name="password"
                    id="password"
                    className={
                      errors.password && touched.password ? "input-error" : null
                    }
                  />
                  <ErrorMessage
                    name="password"
                    component="span"
                    className="error"
                  />
                </div>
                <div className="form-row">
                  <label htmlFor="password">Password</label>
                  <Field
                    type="checkbox"
                    name="dtp"
                    id="dtp"
                    className={errors.dtp && touched.dtp ? "input-error" : null}
                  />
                  <ErrorMessage name="dtp" component="span" className="error" />
                </div>
                <button
                  type="submit"
                  className={!(dirty && isValid) ? "disabled-btn" : ""}
                  disabled={!(dirty && isValid)}
                >
                  Sign In
                </button>
              </Form>
            </div>
          );
        }}
      </Formik>
    );
  }
}
-------------------------------------------------------
formik yup without field
import React from "react";
import "./form_test.css";
import { Formik, Form, ErrorMessage } from "formik";
import * as Yup from "yup";
export default class FormTest extends React.Component {
  initialValues = {
    email: "",
    password: "",
    dtp: false,
  };
  signInSchema = Yup.object().shape({
    email: Yup.string().email().required("Email is required"),

    password: Yup.string()
      .required("Password is required")
      .min(4, "Password is too short - should be 4 chars minimum"),
    dtp: Yup.boolean()
      .required("dtp is required")
      .oneOf([true], "The terms and conditions must be accepted."),
  });
  constructor() {
    super();
    console.log("");
  }
  render() {
    return (
      <Formik
        initialValues={this.initialValues}
        validationSchema={this.signInSchema}
        onSubmit={(values) => {
          console.log(values);
        }}
      >
        {(formik) => {
          const { errors, touched, isValid, dirty, handleChange, values, handleBlur } = formik;
          return (
            <div className="container">
              <h1>Sign in to continue</h1>
              <Form>
                <div className="form-row">
                  <label htmlFor="email">Email</label>
                  <input
                    type="email"
                    name="email"
                    id="email"
                    value={values.email}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    className={
                      errors.email && touched.email ? "input-error" : null
                    }
                  />
                  <ErrorMessage
                    name="email"
                    component="span"
                    className="error"
                  />
                </div>

                <div className="form-row">
                  <label htmlFor="password">Password</label>
                  <input
                    type="password"
                    name="password"
                    id="password"
                    value={values.password}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    className={
                      errors.password && touched.password ? "input-error" : null
                    }
                  />
                  <ErrorMessage
                    name="password"
                    component="span"
                    className="error"
                  />
                </div>
                <div className="form-row">
                  <label htmlFor="password">Password</label>
                  <input
                    type="checkbox"
                    name="dtp"
                    id="dtp"
                    value={values.dtp}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    className={errors.dtp && touched.dtp ? "input-error" : null}
                  />
                  <ErrorMessage name="dtp" component="span" className="error" />
                </div>
                <button
                  type="submit"
                  className={!(dirty && isValid) ? "disabled-btn" : ""}
                  disabled={!(dirty && isValid)}
                >
                  Sign In
                </button>
              </Form>
            </div>
          );
        }}
      </Formik>
    );
  }
}
---------------------------------------------------------------------------------------
