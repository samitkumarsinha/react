src/actions/index.js
//export const incnumber = () => {
export const incnumber = (num) => { -------------for payload
  return {
    type: "INCREMENT",
    payload: num
  };
};
export const decnumber = () => {
  return {
    type: "DECREMENT",
  };
};
--------------------------
src/reducers/index.js
import changenumber from "./updown";
import { combineReducers } from "redux";
const reducers = combineReducers({
  changenumber,
});
export default reducers;
----------------------------
src/reducers/updown.js
const initialstate = 0;
const changenumber = (state = initialstate, action) => {
  switch (action.type) {
    case "INCREMENT":
      //return state + 1;
      return state + action.payload;------for payload
    case "DECREMENT":
      return state - 1;
    default:
      return state;
  }
};
export default changenumber;
-----------------------------------
app.js
import "./App.css";
import { incnumber } from "./actions";
import { decnumber } from "./actions";
import { useSelector, useDispatch } from "react-redux";

function App() {
  const changenumber = useSelector((state) => state.changenumber);
  const dispatch = useDispatch();
  return (
    <div className="panel">
      <button onClick={() => dispatch(incnumber())}>increment</button>
      <button onClick={() => dispatch(incnumber(5))}>increment</button>-----send param as payload
      <label>{changenumber}</label>
      <button onClick={() => dispatch(decnumber())}>decrement</button>
    </div>
  );
}

export default App;
---------------------------------------
index.js
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import store from "./store";
import { Provider } from "react-redux";
store.subscribe(() => console.log(store.getState()));
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
--------------------------------------------------------------------------------------
