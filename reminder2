pass data from child to parent
---------------------------------
a.js (parent)
import React from 'react';
import B from './b';
export default class A extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: [
        { id: 1, name: 'samit', address: 'kk1' },
        { id: 2, name: 'ravi', address: 'kk2' },
        { id: 3, name: 'ramesh', address: 'kk3' },
        { id: 4, name: 'tony', address: 'kk4' },
      ],
      address: ''
    };
  }
  setdata(data){
    console.log(data)
    this.setState({address: data})
  }
  render() {
    return (
      <div>
        {this.state.data.map((item, key) => (
          <div key={key}>
            <B data={item} mydata={(event)=>this.setdata(event)}></B>
             {/*  <B data={item} mydata={this.setdata.bind(this)}></B> */}
          </div>
        ))}
        <div>
          {this.state.address}
        </div>
      </div>
    );
  }
}
-----------------
b.js (child)

import React from 'react';
import './b.css';
export default class B extends React.Component {
  constructor(props) {
    super(props);
    console.log(props);
  }
  showadd(item) {
    console.log(this.props)
    this.props.mydata(item.address)
  }
  render() {
    return (
      <div onClick={()=>this.showadd(this.props.data)}>
        <span>{this.props.data.id}.</span> &nbsp;<span>{this.props.data.name}</span>
      </div>
    );
  }
}
-------------------------------------------------------------------------------------------------
context

test.js (provider)
import React, {createContext} from 'react';
import C from './c';
export const firstname = createContext('');
export default class Test extends React.Component{
    constructor(){
        super();
    }
    render(){
        return(
            <div>  
                <firstname.Provider value={'v'}><C/></firstname.Provider>
            </div>
        )
    }

}
-------------------------------------
c.js (consumer)

import React from "react";
import {firstname} from "./test";
export default class C extends React.Component {
  constructor() {
    super();
    console.log('')
  }
  render() {
    return (
      <div>
        <firstname.Consumer>
        {
          (data)=>{
            return (
              <>
                <p>test {data}</p>
              </>
            )
          }
        }
        </firstname.Consumer>
      </div>
    );
  }
}
-------------------------------------------------------------------
useref
import React from "react";
export default class B extends React.Component {
  constructor() {
    super();
    this.textinput = React.createRef();
  }
  setval(){
    let val = this.textinput.current.value;
    // document.getElementById('mylab').innerHTML=val;
    document.querySelector('#mylab').innerHTML = val;
    this.textinput.current.value = '';
    this.textinput.current.focus();
  }
  render() {
    return (
      <div>
        <input type="text" ref={this.textinput}></input>
        <button onClick={this.setval.bind(this)}>Click</button>
        <label id="mylab"></label>
      </div>
    );
  }
}
--------------------------------------------------------------------------
without useref
import React from "react";
export default class B extends React.Component {
  constructor() {
    super();
    console.log('')
  }
  setval(){
    let val = document.querySelector('#mytext').value;
    // document.getElementById('mylab').innerHTML=val;
    document.querySelector('#mylab').innerHTML = val;
  }
  render() {
    return (
      <div>
        <input type="text" id="mytext"></input>
        <button onClick={this.setval.bind(this)}>Click</button>
        <label id="mylab"></label>
      </div>
    );
  }
}
---------------------------------------------------------------------------
setinterval start and stop

import React, { useState } from "react";
export default function Test1() {
  const [val, setval] = useState(0);
  const [timerid, settimerid] = useState(0);
  const start = () => {
    if (timerid) {
      return;
    }
    const newtimerid = setInterval(() => {
      setval((prev) => prev + 1);
    }, 1000);
    settimerid(newtimerid);
  };
  const stop = () => {
    if (timerid) {
      clearInterval(timerid);
      settimerid(0);
      setval(0);
      return;
    }
  };
  return (
    <>
      <div>
        <button onClick={() => start()}>start</button>
      </div>
      <div>
        <button onClick={() => stop()}>stop</button>
      </div>
      <div>{val}</div>
    </>
  );
}
-------------------------------------------------------------

